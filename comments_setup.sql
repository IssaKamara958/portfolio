-- 1. Create a table for public profiles
-- This table will store user information and their role (user/admin).
create table profiles (
  id uuid references auth.users on delete cascade not null primary key,
  username text unique,
  avatar_url text,
  role text default 'user' not null,
  created_at timestamp with time zone default now(),

  constraint username_length check (char_length(username) >= 3)
);

-- 2. Set up Row Level Security (RLS) for profiles
alter table profiles enable row level security;

create policy "Public profiles are viewable by everyone." on profiles
  for select using (true);

create policy "Users can insert their own profile." on profiles
  for insert with check (auth.uid() = id);

create policy "Users can update own profile." on profiles
  for update using (auth.uid() = id);

-- 3. Create a table for comments
create table comments (
  id bigint generated by default as identity primary key,
  project_id bigint references public.projects on delete cascade not null,
  user_id uuid references auth.users on delete cascade not null,
  content text not null,
  created_at timestamp with time zone default now()
);

-- 4. Set up RLS for comments
alter table comments enable row level security;

create policy "All users can view comments." on comments
  for select using (true);

create policy "Authenticated users can insert comments." on comments
  for insert with check (auth.role() = 'authenticated');

create policy "Users can delete their own comments." on comments
  for delete using (auth.uid() = user_id);

-- 5. Function and Policy for Admin deletion
-- This function securely checks if the current user is an admin.
create or replace function get_user_role()
returns text language plpgsql security definer as $$
begin
  if auth.uid() is null then return 'anon';
  else return (select role from public.profiles where id = auth.uid());
  end if;
end;
$$;

create policy "Admins can delete any comments." on comments
  for delete using (get_user_role() = 'admin');

-- 6. Trigger to create a profile for new users
create function public.handle_new_user()
returns trigger language plpgsql security definer as $$
begin
  insert into public.profiles (id, username)
  values (new.id, new.raw_user_meta_data ->> 'username');
  return new;
end;
$$;

create trigger on_auth_user_created
  after insert on auth.users
  for each row execute procedure public.handle_new_user();
